{
  "docs": [
    {
      "comment": "/**\r\n * <p>\r\n * Returns true if the two given lines have an endpoint in common..\r\n * </p>\r\n * <p>\r\n * It is the default function for checking if the intersection between \r\n * two lines should be ignored.\r\n * </p> \r\n * @param {number[][]} l1 - A line.\r\n * @param {number[][]} l2 - Another line.\r\n * @returns {boolean} True if any endpoints between the supplied lines \r\n * coincide, false otherwise.\r\n */",
      "meta": {
        "range": [
          709,
          990
        ],
        "filename": "modified-bentley-ottmann.js",
        "lineno": 27,
        "path": "C:\\Projects\\LinesIntersection\\js\\lib",
        "code": {
          "id": "astnode100000027",
          "name": "ignoreIntersectionIfEndpointsCoincide",
          "type": "FunctionDeclaration",
          "paramnames": [
            "l1",
            "l2"
          ]
        },
        "vars": {
          "undefined": null
        }
      },
      "description": "<p>\rReturns true if the two given lines have an endpoint in common..\r</p>\r<p>\rIt is the default function for checking if the intersection between \rtwo lines should be ignored.\r</p>",
      "params": [
        {
          "type": {
            "names": [
              "Array.<Array.<number>>"
            ]
          },
          "description": "A line.",
          "name": "l1"
        },
        {
          "type": {
            "names": [
              "Array.<Array.<number>>"
            ]
          },
          "description": "Another line.",
          "name": "l2"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "True if any endpoints between the supplied lines \rcoincide, false otherwise."
        }
      ],
      "name": "ignoreIntersectionIfEndpointsCoincide",
      "longname": "ignoreIntersectionIfEndpointsCoincide",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000007",
      "___s": true
    },
    {
      "comment": "/**\r\n * <p>\r\n * Find segment-segment intersections via an ultra-fast modified version  \r\n * of the Bentley-Ottmann algorithm.\r\n * </p>\r\n * <p> \r\n * In practice it almost always runs much much faster than \r\n * Bentley-Ottmann. Even when there are tens of thousands\r\n * of line segments with hundreds of thousands of intersection the  \r\n * Bentley-Ottmann algorithm still do not come close even though it has\r\n * a better asymptotic O((n+k)log-n) run time (where k is the \r\n * number of intersections and n is the number of lines).\r\n * </p>\r\n * <p>\r\n * The algorithm is the same as Bentley-Ottmann except that it replaces\r\n * a binary tree in the implementation with a flat linked list. \r\n * </p>\r\n * <p>\r\n * See http://geomalgorithms.com/a09-_intersect-3.html\r\n * </p>\r\n * @param {number[][][]} ls - An array of lines.\r\n * @param {function} ignoreIntersectionFunc - A function taking 2 lines\r\n * and returns true if the intersection between those two lines should\r\n * be ignored. The default is ignoreIntersectionIfEndpointsCoincide.\r\n * If not supplied (i.e. undefined) no intersections will be ignored.\r\n * @returns {object} An array of objects of the form {p: number[], \r\n * l1: number[][], l2: number[][]} where p is a point of intersection\r\n * and l1 and l2 are the two lines that intersect.\r\n * @example\r\n * modifiedBentleyOttmann([\r\n * \t\t\t[[0,0],     [1,1]], \r\n *\t\t\t[[0,1],     [1,0]],\r\n *\t\t\t[[0.6,1],   [0.7,0.1]],\r\n *\t\t\t[[0,0.4],   [1,0.4]],\r\n *\t\t\t[[0.2,0],   [0.2,1]]\r\n * ]); //=>\r\n */",
      "meta": {
        "range": [
          2493,
          3816
        ],
        "filename": "modified-bentley-ottmann.js",
        "lineno": 74,
        "path": "C:\\Projects\\LinesIntersection\\js\\lib",
        "code": {
          "id": "astnode100000104",
          "name": "modifiedBentleyOttmann",
          "type": "FunctionDeclaration",
          "paramnames": [
            "ls",
            "ignoreIntersectionFunc"
          ]
        },
        "vars": {
          "events": "modifiedBentleyOttmann~events",
          "i": "modifiedBentleyOttmann~i",
          "l": "modifiedBentleyOttmann~l",
          "ol": "modifiedBentleyOttmann~ol",
          "activeLines": "modifiedBentleyOttmann~activeLines",
          "intersections": "modifiedBentleyOttmann~intersections",
          "event": "modifiedBentleyOttmann~event",
          "node": "modifiedBentleyOttmann~node",
          "activeLine": "modifiedBentleyOttmann~activeLine",
          "p": "modifiedBentleyOttmann~p"
        }
      },
      "description": "<p>\rFind segment-segment intersections via an ultra-fast modified version  \rof the Bentley-Ottmann algorithm.\r</p>\r<p> \rIn practice it almost always runs much much faster than \rBentley-Ottmann. Even when there are tens of thousands\rof line segments with hundreds of thousands of intersection the  \rBentley-Ottmann algorithm still do not come close even though it has\ra better asymptotic O((n+k)log-n) run time (where k is the \rnumber of intersections and n is the number of lines).\r</p>\r<p>\rThe algorithm is the same as Bentley-Ottmann except that it replaces\ra binary tree in the implementation with a flat linked list. \r</p>\r<p>\rSee http://geomalgorithms.com/a09-_intersect-3.html\r</p>",
      "params": [
        {
          "type": {
            "names": [
              "Array.<Array.<Array.<number>>>"
            ]
          },
          "description": "An array of lines.",
          "name": "ls"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "A function taking 2 lines\rand returns true if the intersection between those two lines should\rbe ignored. The default is ignoreIntersectionIfEndpointsCoincide.\rIf not supplied (i.e. undefined) no intersections will be ignored.",
          "name": "ignoreIntersectionFunc"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "An array of objects of the form {p: number[], \rl1: number[][], l2: number[][]} where p is a point of intersection\rand l1 and l2 are the two lines that intersect."
        }
      ],
      "examples": [
        "modifiedBentleyOttmann([\r\t\t\t[[0,0],     [1,1]], \r\t\t\t[[0,1],     [1,0]],\r\t\t\t[[0.6,1],   [0.7,0.1]],\r\t\t\t[[0,0.4],   [1,0.4]],\r\t\t\t[[0.2,0],   [0.2,1]]\r]); //=>"
      ],
      "name": "modifiedBentleyOttmann",
      "longname": "modifiedBentleyOttmann",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000008",
      "___s": true
    },
    {
      "comment": "/**\r\n * Returns zero if the two given event points coincide else return > 0 \r\n * if the first point has a greater x coordinate or, if x coordinates \r\n * are equal if the first point's y is greater.\r\n * @ignore\r\n */",
      "meta": {
        "range": [
          4038,
          4229
        ],
        "filename": "modified-bentley-ottmann.js",
        "lineno": 137,
        "path": "C:\\Projects\\LinesIntersection\\js\\lib",
        "code": {
          "id": "astnode100000305",
          "name": "Event.compare",
          "type": "FunctionExpression",
          "paramnames": [
            "a",
            "b"
          ]
        },
        "vars": {
          "pA": "Event.compare~pA",
          "pB": "Event.compare~pB",
          "res": "Event.compare~res"
        }
      },
      "description": "Returns zero if the two given event points coincide else return > 0 \rif the first point has a greater x coordinate or, if x coordinates \rare equal if the first point's y is greater.",
      "ignore": true,
      "name": "compare",
      "longname": "Event.compare",
      "kind": "function",
      "memberof": "Event",
      "scope": "static",
      "___id": "T000002R000027",
      "___s": true
    },
    {
      "comment": "/**\r\n * Orients the line so that it goes from left to right and if vertical \r\n * from bottom to top.\r\n * \r\n * @ignore \r\n * @param {number[][]} l - A line.\r\n * @returns {number[][]} - An oriented line.\r\n */",
      "meta": {
        "range": [
          4500,
          4788
        ],
        "filename": "modified-bentley-ottmann.js",
        "lineno": 161,
        "path": "C:\\Projects\\LinesIntersection\\js\\lib",
        "code": {
          "id": "astnode100000369",
          "name": "orient",
          "type": "FunctionDeclaration",
          "paramnames": [
            "l"
          ]
        },
        "vars": {
          "undefined": null
        }
      },
      "description": "Orients the line so that it goes from left to right and if vertical \rfrom bottom to top.",
      "ignore": true,
      "params": [
        {
          "type": {
            "names": [
              "Array.<Array.<number>>"
            ]
          },
          "description": "A line.",
          "name": "l"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<Array.<number>>"
            ]
          },
          "description": "- An oriented line."
        }
      ],
      "name": "orient",
      "longname": "orient",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000032",
      "___s": true
    },
    {
      "comment": "/**\r\n * Event class\r\n * \r\n * @ignore\r\n * @constructor\r\n * @param {number} type - 0 -> left endpoint, 1 -> right endpoint\r\n * @param {number[][]} l - A line.\r\n * @param {number[]} p - A point.\r\n */",
      "meta": {
        "range": [
          4992,
          5077
        ],
        "filename": "modified-bentley-ottmann.js",
        "lineno": 189,
        "path": "C:\\Projects\\LinesIntersection\\js\\lib",
        "code": {
          "id": "astnode100000421",
          "name": "Event",
          "type": "FunctionDeclaration",
          "paramnames": [
            "type",
            "l",
            "p"
          ]
        },
        "vars": {
          "this.type": "Event#type",
          "this.l": "Event#l",
          "this.p": "Event#p"
        }
      },
      "description": "Event class",
      "ignore": true,
      "kind": "class",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "0 -> left endpoint, 1 -> right endpoint",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "Array.<Array.<number>>"
            ]
          },
          "description": "A line.",
          "name": "l"
        },
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "A point.",
          "name": "p"
        }
      ],
      "name": "Event",
      "longname": "Event",
      "scope": "global",
      "___id": "T000002R000033",
      "___s": true
    },
    {
      "comment": "/**\r\n * <p>\r\n * Finds the point where two line segments intersect.\r\n * </p>\r\n * <p>\r\n * See <a href=\"http://algs4.cs.princeton.edu/91primitives\">Geometric primitves</a>\r\n * </p> \r\n * @param {number[][]} ab - The first line \r\n * @param {number[][]} cd - The second line\r\n * @param {number} delta - The slope tolerance at which two lines are\r\n * considered either parallel or colinear - defaults to 1e-10 \r\n * @returns {number[]} The point where the two line segments intersect  \r\n * or undefined if they don't or if they intersect at infinitely many \r\n * points. \r\n */",
      "meta": {
        "range": [
          587,
          1428
        ],
        "filename": "seg-seg-intersection.js",
        "lineno": 19,
        "path": "C:\\Projects\\LinesIntersection\\js\\lib",
        "code": {
          "id": "astnode100000458",
          "name": "segSegIntersection",
          "type": "FunctionDeclaration",
          "paramnames": [
            "ab",
            "cd",
            "delta"
          ]
        },
        "vars": {
          "delta": "segSegIntersection~delta",
          "undefined": null,
          "denom": "segSegIntersection~denom",
          "rNumer": "segSegIntersection~rNumer",
          "sNumer": "segSegIntersection~sNumer",
          "r": "segSegIntersection~r",
          "s": "segSegIntersection~s"
        }
      },
      "description": "<p>\rFinds the point where two line segments intersect.\r</p>\r<p>\rSee <a href=\"http://algs4.cs.princeton.edu/91primitives\">Geometric primitves</a>\r</p>",
      "params": [
        {
          "type": {
            "names": [
              "Array.<Array.<number>>"
            ]
          },
          "description": "The first line",
          "name": "ab"
        },
        {
          "type": {
            "names": [
              "Array.<Array.<number>>"
            ]
          },
          "description": "The second line",
          "name": "cd"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The slope tolerance at which two lines are\rconsidered either parallel or colinear - defaults to 1e-10",
          "name": "delta"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          },
          "description": "The point where the two line segments intersect  \ror undefined if they don't or if they intersect at infinitely many \rpoints."
        }
      ],
      "name": "segSegIntersection",
      "longname": "segSegIntersection",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000040",
      "___s": true
    },
    {
      "kind": "package",
      "longname": "package:undefined",
      "files": [
        "C:\\Projects\\LinesIntersection\\js\\lib\\modified-bentley-ottmann.js",
        "C:\\Projects\\LinesIntersection\\js\\lib\\seg-seg-intersection.js"
      ],
      "___id": "T000002R000048",
      "___s": true
    }
  ]
}