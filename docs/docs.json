{
	"id": 0,
	"name": "Lines Intersections",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 1,
			"name": "\"index\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Projects/linesintersections/index.ts",
			"children": [
				{
					"id": 2,
					"name": "Event",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Event class",
						"tags": [
							{
								"tag": "ignore",
								"text": ""
							},
							{
								"tag": "constructor",
								"text": ""
							},
							{
								"tag": "param",
								"text": "0 -> left endpoint, 1 -> right endpoint",
								"param": "type"
							},
							{
								"tag": "param",
								"text": "A line.",
								"param": "l"
							},
							{
								"tag": "param",
								"text": "A point.\n",
								"param": "p"
							}
						]
					},
					"children": [
						{
							"id": 6,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 7,
									"name": "new Event",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 8,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 9,
											"name": "l",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											}
										},
										{
											"id": 10,
											"name": "p",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 2
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 169,
									"character": 16
								}
							]
						},
						{
							"id": 4,
							"name": "l",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "index.ts",
									"line": 168,
									"character": 5
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "array",
									"elementType": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							}
						},
						{
							"id": 5,
							"name": "p",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "index.ts",
									"line": 169,
									"character": 5
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						},
						{
							"id": 3,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "index.ts",
									"line": 167,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 11,
							"name": "compare",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 12,
									"name": "compare",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 13,
											"name": "a",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 14,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 15,
															"name": "p",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "index.ts",
																	"line": 178,
																	"character": 25
																}
															],
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "number"
																}
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																15
															]
														}
													],
													"sources": [
														{
															"fileName": "index.ts",
															"line": 178,
															"character": 21
														}
													]
												}
											}
										},
										{
											"id": 16,
											"name": "b",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 17,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 18,
															"name": "p",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "index.ts",
																	"line": 178,
																	"character": 45
																}
															],
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "number"
																}
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																18
															]
														}
													],
													"sources": [
														{
															"fileName": "index.ts",
															"line": 178,
															"character": 41
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 178,
									"character": 18
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								6
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4,
								5,
								3
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								11
							]
						}
					],
					"sources": [
						{
							"fileName": "index.ts",
							"line": 166,
							"character": 11
						}
					]
				},
				{
					"id": 19,
					"name": "DELTA",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 5,
							"character": 11
						}
					],
					"type": {
						"type": "unknown",
						"name": "1e-10"
					},
					"defaultValue": "1e-10"
				},
				{
					"id": 20,
					"name": "EVENT_LEFT",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 7,
							"character": 16
						}
					],
					"type": {
						"type": "unknown",
						"name": "0"
					},
					"defaultValue": "0"
				},
				{
					"id": 21,
					"name": "EVENT_RIGHT",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 8,
							"character": 17
						}
					],
					"type": {
						"type": "unknown",
						"name": "1"
					},
					"defaultValue": "1"
				},
				{
					"id": 34,
					"name": "deltaCompare",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isLet": true
					},
					"signatures": [
						{
							"id": 35,
							"name": "deltaCompare",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 36,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "index.ts",
							"line": 128,
							"character": 16
						}
					]
				},
				{
					"id": 22,
					"name": "ignoreIntersectionIfEndpointsCoincide",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isPrivate": true
					},
					"signatures": [
						{
							"id": 23,
							"name": "ignoreIntersectionIfEndpointsCoincide",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isPrivate": true
							},
							"comment": {
								"shortText": "Returns true if the two given lines have an endpoint in common.",
								"text": "It is the default function for checking if the intersection between\ntwo lines should be ignored.\n",
								"returns": "True if any endpoints between the supplied lines\ncoincide, false otherwise.\n"
							},
							"parameters": [
								{
									"id": 24,
									"name": "l1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "A line."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "array",
											"elementType": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									}
								},
								{
									"id": 25,
									"name": "l2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Another line."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "array",
											"elementType": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "index.ts",
							"line": 23,
							"character": 46
						}
					]
				},
				{
					"id": 26,
					"name": "modifiedBentleyOttmann",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 27,
							"name": "modifiedBentleyOttmann",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Find segment-segment intersections via a very fast modified version of the\nBentley-Ottmann algorithm.",
								"text": "In practice it almost always runs much much faster than Bentley-Ottmann. Even\nwhen there are tens of thousands of line segments with hundreds of thousands\nof intersection the Bentley-Ottmann algorithm still do not come close even\nthough it has a better asymptotic O((n+k)log-n) run time (where k is the\nnumber of intersections and n is the number of lines).\n\nThe algorithm is the same as Bentley-Ottmann except that it replaces a binary\ntree in the implementation with a flat linked list.\n\nSee http://geomalgorithms.com/a09-_intersect-3.html\n\nReturns an array of objects of the form {p: number[], l1, l2} where p is a\npoint of intersection and l1 and l2 are the two line segments that intersect.\nNote that l1 and l2 reference the same line segment objects passed in to this\nfunction. This allows for the attachedment of additional properties to the\nline segment objects that won't be lost.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\nmodifiedBentleyOttmann([\n\t\t\t[[0,0],     [1,1]],\n\t\t\t[[0,1],     [1,0]],\n\t\t\t[[0.6,1],   [0.7,0.1]],\n\t\t\t[[0,0.4],   [1,0.4]],\n\t\t\t[[0.2,0],   [0.2,1]]\n]); //=>\n"
									}
								]
							},
							"parameters": [
								{
									"id": 28,
									"name": "ls",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "An array of line segments."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "array",
											"elementType": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										}
									}
								},
								{
									"id": 29,
									"name": "ignoreIntersectionFunc",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "If set to true line segments with coinciding\nendpoints' intersection will be ignored. If falsey, all intersections will be\nreturned. If a function is provided (taking as parameters 2 lines and returns\ntrue if the intersection between those two lines should be ignored) then\nthose intersections for which the function returns true will be ignored."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reflection",
												"declaration": {
													"id": 30,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 31,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 32,
																	"name": "l1",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "array",
																			"elementType": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		}
																	}
																},
																{
																	"id": 33,
																	"name": "l2",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "array",
																			"elementType": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"sources": [
														{
															"fileName": "index.ts",
															"line": 74,
															"character": 31
														}
													]
												}
											},
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "index.ts",
							"line": 72,
							"character": 31
						}
					]
				},
				{
					"id": 37,
					"name": "orient",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isPrivate": true
					},
					"signatures": [
						{
							"id": 38,
							"name": "orient",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isPrivate": true
							},
							"comment": {
								"shortText": "Orients the line so that it goes from left to right and if vertical\nfrom bottom to top. Returns the oriented line."
							},
							"parameters": [
								{
									"id": 39,
									"name": "l",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "A line.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "array",
											"elementType": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "array",
									"elementType": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "index.ts",
							"line": 138,
							"character": 15
						}
					]
				},
				{
					"id": 40,
					"name": "segSegIntersection",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 41,
							"name": "segSegIntersection",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<p>\nFinds the point where two line segments intersect.\n</p>\n<p>\nSee <a href=\"http://algs4.cs.princeton.edu/91primitives\">Geometric primitves</a>\n</p>",
								"returns": "The point where the two line segments intersect\nor undefined if they don't or if they intersect at infinitely many\npoints.\n"
							},
							"parameters": [
								{
									"id": 42,
									"name": "ab",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The first line"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "array",
											"elementType": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									}
								},
								{
									"id": 43,
									"name": "cd",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The second line"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "array",
											"elementType": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									}
								},
								{
									"id": 44,
									"name": "delta",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The slope tolerance at which two lines are\nconsidered either parallel or colinear - defaults to 1e-10"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "1e-10"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "index.ts",
							"line": 207,
							"character": 27
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						2
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						19,
						20,
						21
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						34,
						22,
						26,
						37,
						40
					]
				}
			],
			"sources": [
				{
					"fileName": "index.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				1
			]
		}
	]
}